# -*- coding: utf-8 -*-
"""speed_estimation_yolo.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bFtD1UJueJdjNI9sJ_c-hAaTx9XbaquQ
"""

import cv2
import math
import numpy as np
import cvzone
from ultralytics import YOLO
from google.colab import drive
from google.colab.patches import cv2_imshow

model = YOLO('yolov8n.pt')

source_path = "/content/drive/MyDrive/video.mp4"
output_path = "/content/drive/MyDrive/output_vehicle_speed.mp4"

cap = cv2.VideoCapture(source_path)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS) or 30

out = cv2.VideoWriter(output_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (width, height))

METERS_PER_PIXEL = 0.05
last_positions = {}
frame_id = 0

while True:
    ret, frame = cap.read()
    if not ret:
        print("âœ… Processing complete.")
        break

    frame_id += 1
    results = model(frame, stream=True)

    for r in results:
        for box in r.boxes:
            conf = float(box.conf[0])
            cls = int(box.cls[0])
            label = model.names[cls]

            if label in ["car", "truck", "bus", "motorbike"] and conf > 0.4:
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                cx, cy = (x1 + x2)//2, (y1 + y2)//2
                track_id = hash((x1, y1, x2, y2)) % 10000

                if track_id in last_positions:
                    prev_cx, prev_cy, prev_frame = last_positions[track_id]
                    pixel_distance = math.hypot(cx - prev_cx, cy - prev_cy)
                    time_elapsed = (frame_id - prev_frame) / fps
                    distance_m = pixel_distance * METERS_PER_PIXEL
                    speed_m_s = distance_m / time_elapsed if time_elapsed > 0 else 0
                    speed_km_h = speed_m_s * 3.6
                else:
                    speed_km_h = 0.0

                last_positions[track_id] = (cx, cy, frame_id)
                color = (0, 255, 0) if speed_km_h < 80 else (0, 0, 255)
                cvzone.cornerRect(frame, (x1, y1, x2 - x1, y2 - y1), colorC=color)
                cvzone.putTextRect(frame, f'{label} | {speed_km_h:.1f} km/h', (x1, y1 - 10), scale=1, thickness=1, colorR=color)

    out.write(frame)
    if frame_id % 50 == 0:
        print(f"ðŸŸ¢ Processed {frame_id} frames...")
        cv2_imshow(frame)

cap.release()
out.release()
cv2.destroyAllWindows()
print("ðŸŽ‰ Output video saved successfully to Google Drive:")
print(output_path)

